# Comment out below to use mac apache instead of custom install
#export PATH=/usr/local/apache2/bin/:$PATH
export PATH=/home/sharath/code/arcanist/bin:/home/sharath/.local/bin:/home/sharath/bin:/home/sharath/Downloads/hadoop-2.9.2/bin:/home/sharath/Downloads/hadoop-2.9.2/sbin:/home/sharath/.pyenv/bin:/home/sharath/Downloads/gradle-7.0/bin:/home/sharath/Downloads/go/bin:$PATH
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
export GRADLE_HOME=/home/sharath/Downloads/gradle-7.0

# blue
PS1='\[\e[1;34m\][\u@\h $(pwd)]\$\[\e[0m\] '


# yellow
PS1='\[\e[1;33m\][\u@\h $(pwd)]\$\[\e[0m\] '
#PS1='\[\e[1;35m\][\u@\h \W]\$\[\e[0m\] '

# make screen honor ssh forwarding
if [[ -S "$SSH_AUTH_SOCK" && ! -h "$SSH_AUTH_SOCK" ]]; then
    ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock;
fi
export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock;

# change ctrl-c to ctrl-u
# stty intr ^U
alias rs="sudo /usr/local/apache2/bin/apachectl -k  restart"
#alias ip='ifconfig  | grep "inet addr:"| grep -v "127.0.0.1" | cut -d: -f2 | cut -d" " -f1'
#show dev-d42sharath1 osd | grep primary_ip | cut -d ":" -f 2 |  sed 's/"//g' | sed 's/,//g' | xargs cssh  
#source ~/git-completion.bash

#export DYLD_LIBRARY_PATH=/usr/local/mysql/lib/

export CLICOLOR=1
COLOR_BOLD="\[\e[1m\]"
COLOR_DEFAULT="\[\e[0m\]"

## Colorize the ls output ##
alias ls="ls --color"
 
alias myip="hostname -I"

## Use a long listing format ##
alias ll='ls -laF'
 
## Show hidden files ##
alias l.='ls -d .* --color=auto'
## get rid of command not found ##
alias cd..='cd ..'

## a quick way to get out of current directory ##
alias ..='cd ..'
alias ...='cd ../../'
alias ....='cd ../../../'
alias .....='cd ../../../../'

## Colorize the grep command output for ease of use (good for log files)##
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

# handy short cuts #
alias h='cat ~/.bash_eternal_history'
alias hg='cat ~/.bash_eternal_history | grep $@'
alias hga='cat ~/.bash_eternal_history ~/flipkart_bash_eternal_history | grep $@'
hsql() {
	grep -iIr $@ /home/sharath/dbeaver/
}
alias j='jobs -l'


hcmnt() {

# adds comments to bash history entries (or logs them)

# by Dennis Williamson - 2009-06-05 - updated 2009-06-19
# http://stackoverflow.com/questions/945288/saving-current-directory-to-bash-history
# (thanks to Lajos Nagy for the idea)

# the comments can include the directory
# that was current when the command was issued
# plus optionally, the date or other information

# set the bash variable PROMPT_COMMAND to the name
# of this function and include these options:

    # -e - add the output of an extra command contained in the hcmntextra variable
    # -i - add ip address of terminal that you are logged in *from*
    #      if you're using screen, the screen number is shown
    #      if you're directly logged in, the tty number or X display number is shown
    # -l - log the entry rather than replacing it in the history
    # -n - don't add the directory
    # -t - add the from and to directories for cd commands
    # -y - add the terminal device (tty)
    # text or a variable

# Example result for PROMPT_COMMAND='hcmnt -et $LOGNAME'
#     when hcmntextra='date "+%Y%m%d %R"'
# cd /usr/bin ### mike 20090605 14:34 /home/mike -> /usr/bin

# Example for PROMPT_COMMAND='hcmnt'
# cd /usr/bin ### /home/mike

# Example for detailed logging:
#     when hcmntextra='date "+%Y%m%d %R"'
#     and PROMPT_COMMAND='hcmnt -eityl ~/.hcmnt.log $LOGNAME@$HOSTNAME'
#     $ tail -1 ~/.hcmnt.log
#     cd /var/log ### dave@hammerhead /dev/pts/3 192.168.1.1 20090617 16:12 /etc -> /var/log


# INSTALLATION: source this file in your .bashrc

    # will not work if HISTTIMEFORMAT is used - use hcmntextra instead

    # HISTTIMEFORMAT still works in a subshell, however, since it gets unset automatically:

    #   $ htf="%Y-%m-%d %R "    # save it for re-use
    #   $ (HISTTIMEFORMAT=$htf; history 20)|grep 11:25

	exit_status="$(echo $?)"
    local script=$FUNCNAME

    local hcmnt=
    local cwd=
    local extra=
    local text=
    local logfile=

    local options=":eil:nty"
    local option=
    OPTIND=1
    local usage="Usage: $script [-e] [-i] [-l logfile] [-n|-t] [-y] [text]"

    local newline=$'\n' # used in workaround for bash history newline bug
    local histline=     # used in workaround for bash history newline bug

    local ExtraOpt=
    local LogOpt=
    local NoneOpt=
    local ToOpt=
    local tty=
    local ip=

    # *** process options to set flags ***

    while getopts $options option
    do
        case $option in
            e ) ExtraOpt=1;;        # include hcmntextra
            i ) ip="$(who --ips -m)" # include the terminal's ip address
                ip=($ip)
                ip="${ip[4]}"
                if [[ -z $ip ]]
                then
                    ip=$(tty)
                fi;;
            l ) LogOpt=1            # log the entry
                logfile=$OPTARG;;
            n ) if [[ $ToOpt ]]
                then
                    echo "$script: can't include both -n and -t."
                    echo $usage
                    return 1
                else
                    NoneOpt=1       # don't include path
                fi;;
            t ) if [[ $NoneOpt ]]
                then
                    echo "$script: can't include both -n and -t."
                    echo $usage
                    return 1
                else
                    ToOpt=1         # cd shows "from -> to"
                fi;;
            y ) tty=$(tty);;
            : ) echo "$script: missing filename: -$OPTARG."
                echo $usage
                return 1;;
            * ) echo "$script: invalid option: -$OPTARG."
                echo $usage
                return 1;;
        esac
    done

    text=($@)                       # arguments after the options are saved to add to the comment
    text="${text[*]:$OPTIND - 1:${#text[*]}}"

    # *** process the history entry ***

    hcmnt=$(history 1)              # grab the most recent command

    # save history line number for workaround for bash history newline bug
    histline="${hcmnt%  *}"

    hcmnt="${hcmnt# *[0-9]*  }"     # strip off the history line number

    if [[ -z $NoneOpt ]]            # are we adding the directory?
    then
        if [[ ${hcmnt%% *} == "cd" ]]    # if it's a cd command, we want the old directory
        then                             #   so the comment matches other commands "where *were* you when this was done?"
            if [[ $ToOpt ]]
            then
                cwd="$OLDPWD -> $PWD"    # show "from -> to" for cd
            else
                cwd=$OLDPWD              # just show "from"
            fi
        else
            cwd=$PWD                     # it's not a cd, so just show where we are
        fi
    fi

    if [[ $ExtraOpt && $hcmntextra ]]    # do we want a little something extra?
    then
        extra=$(eval "$hcmntextra")
    fi

    
    hostname="$(hostname)"

    # strip off the old ### comment if there was one so they don't accumulate
    # then build the string (if text or extra aren't empty, add them plus a space)
    comment="### ${exit_status:+$exit_status }${hostname:+$hostname }${text:+$text }${extra:+$extra }$cwd"
    history -d $histline
    history -s "$hcmnt $comment "
    history -a
} # END FUNCTION hcmnt
shopt -s histappend
unset HISTTIMEFORMAT
export HISTSIZE=
export HISTFILESIZE=-1
export HISTCONTROL=ignoredups
export HISTFILE=~/.bash_eternal_history
export HISTIGNORE=?:??
export PROMPT_COMMAND='hcmnt -e'
export INPUTRC=~/.inputrc
export hcmntextra='date "+%Y-%m-%d %R"'

# eliminate duplicates
#cat -n .bash_eternal_history | sort -uk2 | sort -nk1 | cut -f2-


#host name autocomplete
complete -W "$(echo `cat ~/.ssh/known_hosts | cut -f 1 -d ' ' | sed -e s/,.*//g | uniq | grep -v '\['`)" ssh

## cd ls
function cs () { cd "$@" && ls; }
export PATH=$PATH:/f/usr/local/go/bin
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export PKICTL_MEMBER_CONTEXT=sgururaj@indodana.com@86c5ec6880a7442d8fa2aa92ca24ce98@pkictl-prod
export PKICTL_MEMBER_CERT_FILE=/home/sharath/.certs/certs/member/sgururaj@indodana.com@86c5ec6880a7442d8fa2aa92ca24ce98@pkictl-prod/sgururaj@indodana.com@86c5ec6880a7442d8fa2aa92ca24ce98@pkictl-prod.crt
export PKICTL_MEMBER_KEY_FILE=/home/sharath/.certs/certs/member/sgururaj@indodana.com@86c5ec6880a7442d8fa2aa92ca24ce98@pkictl-prod/.private/sgururaj@indodana.com@86c5ec6880a7442d8fa2aa92ca24ce98@pkictl-prod.key
export PKICTL_MEMBER_CA_CERT_FILE=/home/sharath/.certs/certs/member/sgururaj@indodana.com@86c5ec6880a7442d8fa2aa92ca24ce98@pkictl-prod/sgururaj@indodana.com@86c5ec6880a7442d8fa2aa92ca24ce98@pkictl-prod.cert-ca-chain.crt
export PKICTL_MEMBER_ROOT_CA_CERT_FILE=/home/sharath/.certs/certs/member/sgururaj@indodana.com@86c5ec6880a7442d8fa2aa92ca24ce98@pkictl-prod/sgururaj@indodana.com@86c5ec6880a7442d8fa2aa92ca24ce98@pkictl-prod.root-ca.crt
export PKICTL_MEMBER_SIGNER_CA_CERT_FILE=/home/sharath/.certs/certs/member/sgururaj@indodana.com@86c5ec6880a7442d8fa2aa92ca24ce98@pkictl-prod/sgururaj@indodana.com@86c5ec6880a7442d8fa2aa92ca24ce98@pkictl-prod.intermediate-ca.crt
export PKICTL_MEMBER_PKCS12_FILE=/home/sharath/browser-certificates/sgururaj@indodana.com@86c5ec6880a7442d8fa2aa92ca24ce98@pkictl-prod.p12
export PKICTL_MEMBER_PKCS12_KEYSTORE_PASSWORD=cermati

